import React from 'react';

const DynamicStylesWithCSSModules = () => {
    return (
        <p>
            {/*
                Let's also use the CSS Modules in CourseInput Component. We need to change the name of
                CourseInput.css to CourseInput.module.css and import the file name accordingly in the
                Component file itself. And we have to use the div in JSX code and have to use the
                className like below:

                <div className={styles['form-control']}></div>

                We just have to use a different syntax for accessing the property. We use the square
                brackets and wrap the name into single quotes. This is how we can also access properties
                in JavaScript and with that we can also properties with such a name. Because the name
                form-control contains hypen in it, so it was impossible to call this property like:

                className=styles.form-control

                Moreover strings are valid keys in JavaScript objects. To apply the invalid style also,
                we need to make sure that the invalid CSS class is added on the element and currently
                that's never happening. We're only adding form-control, we're never adding the
                transformed version of the invalid class.

                It is something that we can do easily though. We can go back to the backtick syntax to
                create a string where we inject values and the first value I want to inject is that
                resolved class name. So I inject this converted class name, which in the end we're
                extracting from that styles object here into the string below:

                <div className={`${styles['form-control']}`}>

                And now of course just as before, we can add an additional clause here. We can check if
                !isValid and if that's the case, I add styles.invalid referring to the converted version
                of that invalid class.

                <div className={`${styles['form-control']}` ${!isValid && styles.invalid}}>

                Converted because that's what the CSS Module process will do behing the scenes. And
                invalid because the CSS class name is invalid in the CSS file. By saving and running this
                we will get the exact same behavior but now we are adding dynamic classes with CSS
                Modules. It's not really that different from normal classes because these are normal
                classes.

                We just extract the converted class names as they were generated by CSS Modules and then
                we combine them as needed. Last but not least, let's see how media queries are set up in
                CSS modules.

                For that let's go back to the Button.module.css and here you just add a media query as
                you would always add it, maybe here at the bottom. The important difference to Styled
                Components media query is that now you need your selector again. You always need that in
                CSS. The non selector syntax in Styled Components is really just a Styled Components
                feature because it processes your CSS code.

                That's should all be needed no other changes are required because I'm working on the
                same CSS class, which I'm already adding to the Component.
            */}
        </p>
    )
}

export default DynamicStylesWithCSSModules;